package designPatterns.gof.behavioral.command;

import java.util.LinkedList;

/**
 * Instances of this class are responsible for managing the execution of commands
 * 
 * @pattern Command (role=commandManagerClass)
 * 
 * @generatedBy CodePro at 12/4/07 7:07 PM
 * 
 * @author Sandeep.Maloth
 * 
 * @version $Revision$
 */
public class CommandManager {

	/**
	 * The maximum number of command to keep in the history
	 */
	private int maxHistoryLength = 100;
	/**
	 * The list of commands that have been undone and may be redone.
	 */
	private LinkedList history = new LinkedList();
	/**
	 * The list of commands that have been executed.
	 */
	private LinkedList redoList = new LinkedList();

	/**
	 * Invoke a command and add it to the history. If the command object's doIt method was previously called, then it is expected to return false.
	 * 
	 * @param command the command to be invoked
	 * 
	 * @see designPatterns.gof.behavioral.command.AbstractCommand
	 */
	public void invokeCommand(AbstractCommand command)
	{
		if (command instanceof Undo) {
			undo();
			return;
		}
		if (command instanceof Redo) {
			redo();
			return;
		}
		if (command.doIt()) {
			// doIt returned true, which means it can be undone
			addToHistory(command);
		} else {
			// command cannot be undone
			history.clear();
		}
		// After a command that is not an undo or a redo, ensure that
		// the redo list is empty.
		if (redoList.size() > 0)
			redoList.clear();
	}

	/**
	 * Undo the most recent command in the commmand history.
	 */
	private void undo()
	{
		if (history.size() > 0) { // If there are commands in the history
			AbstractCommand undoCommand;
			undoCommand = (AbstractCommand) history.removeFirst();
			undoCommand.undoIt();
			redoList.addFirst(undoCommand);
		}
	}

	/**
	 * Redo the most recently undone command
	 */
	private void redo()
	{
		if (redoList.size() > 0) { // If the redo list is not empty
			AbstractCommand redoCommand;
			redoCommand = (AbstractCommand) redoList.removeFirst();
			redoCommand.doIt();
			history.addFirst(redoCommand);
		}
	}

	/**
	 * Add a command to the command history.
	 * 
	 * @param command the command to add to the history
	 * 
	 * @see designPatterns.gof.behavioral.command.AbstractCommand
	 */
	private void addToHistory(AbstractCommand command)
	{
		history.addFirst(command);
		// If size of history has exceded maxHistoryLength, remove
		// the oldest command from the history
		if (history.size() > maxHistoryLength)
			history.removeLast();
	}
}

/*
 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId = com.instantiations.assist.eclipse.pattern.commandPattern strategyId =
 * com.instantiations.assist.eclipse.pattern.commandPattern.command abstract = true abstractCommandClass = AbstractCommand commandManagerClass = CommandManager commands = command, command2
 * generateUndoRedo = true interfaces = package = designPatterns.gof.behavioral.command package.sourceFolder = coreJavaExamples/src public = true superclassType = java.lang.Object
 */