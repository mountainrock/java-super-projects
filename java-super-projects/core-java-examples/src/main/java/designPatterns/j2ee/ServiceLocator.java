package designPatterns.j2ee;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import javax.naming.InitialContext;
import javax.naming.NamingException;

/**
 * Retrieves services by JNDI name. There is only one instance.
 * 
 * @pattern ServiceLocator (role=locatorClass)
 * 
 * @generatedBy CodePro at 12/4/07 7:13 PM
 * 
 * @author Sandeep.Maloth
 * 
 * @version $Revision$
 */
public class ServiceLocator {

	/**
	 * The look-up context.
	 */
	private InitialContext ic;
	/**
	 * The look-up cache.
	 */
	private Map cache;
	/**
	 * The sole instance of this class.
	 */
	private static ServiceLocator instance;

	/**
	 * Gets the sole instance of this class.
	 */
	public static ServiceLocator getInstance() throws ServiceLocatorException
	{
		if (instance == null)
			instance = new ServiceLocator();
		return instance;
	}

	/**
	 * Constructs an instance.
	 */
	private ServiceLocator() throws ServiceLocatorException {
		try {
			ic = new InitialContext();
			cache = Collections.synchronizedMap(new HashMap());
		} catch (NamingException ne) {
			throw new ServiceLocatorException(ne);
		} catch (Exception e) {
			throw new ServiceLocatorException(e);
		}
	}

	/**
	 * Gets the EJB local home factory. Clients need to cast to the desired type of <code>EJBHome</code>.
	 * 
	 * @param jndiName the JNDI name
	 * 
	 * @return the local EJB home for the given name
	 */
	/*
	 * public EJBLocalHome getLocalHome(String jndiName) throws ServiceLocatorException { return (EJBLocalHome) lookupCache(jndiName); }
	 *//**
	 * Gets the EJB remote home factory. Clients need to cast to the desired type of <code>EJBHome</code>.
	 * 
	 * @param jndiName the JNDI name
	 * @param cls the class to which to narrow
	 * 
	 * @return the EJB home for the given name
	 */
	/*
	 * public EJBHome getRemoteHome(String jndiName, Class cls) throws ServiceLocatorException { EJBHome home = null; try { if (cache.containsKey(jndiName)) { home = (EJBHome) cache.get(jndiName); }
	 * else { Object objref = ic.lookup(jndiName); Object obj = PortableRemoteObject.narrow(objref, cls); home = (EJBHome) obj; cache.put(jndiName, home); } } catch (NamingException ne) { throw new
	 * ServiceLocatorException(ne); } catch (Exception e) { throw new ServiceLocatorException(e); } return home; }
	 */
	/**
	 * Looks up an object in the cache, installing it if missing.
	 * 
	 * @param jndiName the JNDI name of the object
	 * 
	 * @return the corresponding object
	 */
	private Object lookupCache(String jndiName) throws ServiceLocatorException
	{
		if (cache.containsKey(jndiName))
			return cache.get(jndiName);
		Object obj = lookupEnv(jndiName);
		cache.put(jndiName, obj);
		return obj;
	}

	/**
	 * Looks up an object in the environment.
	 * 
	 * @param jndiName the JNDI name of the object
	 * 
	 * @return the corresponding object
	 */
	private Object lookupEnv(String jndiName) throws ServiceLocatorException
	{
		Object obj = null;
		try {
			obj = ic.lookup(jndiName);
		} catch (NamingException ne) {
			throw new ServiceLocatorException(ne);
		} catch (Exception e) {
			throw new ServiceLocatorException(e);
		}
		return obj;
	}

	/**
	 * Gets the named <code>String</code> value.
	 * 
	 * @param jndiName the JNDI name of the object
	 * 
	 * @return the corresponding object
	 */
	public String getString(String jndiName) throws ServiceLocatorException
	{
		return (String) lookupEnv(jndiName);
	}
}

/*
 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId = com.instantiations.assist.eclipse.pattern.serviceLocatorPattern strategyId =
 * com.instantiations.assist.eclipse.pattern.serviceLocatorPattern.serviceLocator exceptionClass = ServiceLocatorException exceptionPackage = designPatterns.gof.structural
 * exceptionPackage.sourceFolder = coreJavaExamples/src locatorClass = ServiceLocator locatorPackage = designPatterns.j2ee locatorPackage.sourceFolder = coreJavaExamples/src locatorTypes = useCache =
 * true
 */