package designPatterns.gof.structural.decorator;

/**
 * The class <code>AbstractWrapper</code> acts as a wrapper for subclasses of the class {@link <code>Object</code>}.
 * 
 * @pattern Decorator (role=abstractWrapperClass)
 * 
 * @generatedBy CodePro at 12/4/07 7:10 PM
 * 
 * @author Sandeep.Maloth
 * 
 * @version $Revision$
 */
public abstract class AbstractWrapper {

	/**
	 * The object that is being wrappered.
	 * 
	 * @see java.lang.Object
	 */
	private Object component;

	/**
	 * Create a new wrapper for the <code>Object</code> instance.
	 * 
	 * @param component the object that is being wrappered
	 * 
	 * @see java.lang.Object
	 */
	public AbstractWrapper(Object component) {
		this.component = component;
	}
}

/*
 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId = com.instantiations.assist.eclipse.pattern.decoratorPattern strategyId =
 * com.instantiations.assist.eclipse.pattern.decoratorPattern.decorator abstract = true abstractStyle = &Class based abstractStyle.index = 0 classMethods = componentField = component concreteClasses =
 * ConcreteWrapper generateAccessors = false interfaceMethods = package = designPatterns.gof.structural.decorator package.sourceFolder = coreJavaExamples/src public = true superclassType =
 * java.lang.Object wrapperClass = AbstractWrapper
 */