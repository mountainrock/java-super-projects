package designPatterns.gof.structural.proxy;

import http.Test;

/**
 * The class <code>Proxy</code> acts as a proxy for instances of the class {@link <code>Test</code>}.
 * 
 * @pattern Proxy
 * 
 * @generatedBy CodePro at 12/4/07 7:12 PM
 * 
 * @author Sandeep.Maloth
 * 
 * @version $Revision$
 */
public class Proxy {

	/**
	 * The object that is being wrappered.
	 * 
	 * @see http.Test
	 */
	private Test subject;

	/**
	 * Create a new proxy for the <code>Test</code> instance.
	 * 
	 * @param subject the object to be wrappered
	 * 
	 * @see http.Test
	 */
	public Proxy(Test subject) {
		this.subject = subject;
	}

	/**
	 * Return the object that is being wrappered
	 * 
	 * @return subject the object that is being wrappered
	 * 
	 * @see http.Test
	 */
	public Test getSubject()
	{
		return subject;
	}
}

/*
 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId = com.instantiations.assist.eclipse.pattern.proxyPattern strategyId =
 * com.instantiations.assist.eclipse.pattern.proxyPattern.proxy abstract = false final = false implementInterfaces = true implementPublicMethods = false package = designPatterns.gof.structural.proxy
 * package.sourceFolder = coreJavaExamples/src proxyClass = Proxy public = true shouldBeImmutable = true subjectField = subject subjectType = http.Test superclassType = java.lang.Object
 */