package designPatterns.gof.behavioral.template;

/**
 * The class <code>AbstractTemplate</code> defines abstract primitive operations that concrete subclasses define to implement steps of an algorithm. Implements a template method defining the skeleton
 * of an algorithm.
 * 
 * @pattern Template Method (role=abstractTemplateType)
 * 
 * @generatedBy CodePro at 12/4/07 7:05 PM
 * 
 * @author Sandeep.Maloth
 * 
 * @version $Revision$
 */
public abstract class AbstractTemplate {

	/**
	 * Perform the <code>templateMethod1</code> behavior.
	 */
	public abstract void templateMethod1();

	/**
	 * Perform the <code>templateMethod2</code> behavior.
	 */
	public abstract void templateMethod2();

	/**
	 * Defines the skeleton of an algorithm. Calls primitive operations as well as operations defined in the abstract class or those in other objects.
	 */
	public void template()
	{
		// execute the templateMethod1() operation
		templateMethod1();
		// execute the templateMethod2() operation
		templateMethod2();
	}
}

/*
 * $CPS$ This comment was generated by CodePro. Do not edit it. patternId = com.instantiations.assist.eclipse.pattern.templateMethodPattern strategyId =
 * com.instantiations.assist.eclipse.pattern.templateMethodPattern.templateMethod abstract = true concreteTemplateList = ConcreteClass package = designPatterns.gof.behavioral.template
 * package.sourceFolder = coreJavaExamples/src primitiveOperations.0 = void,templateMethod1, primitiveOperations.1 = void,templateMethod2, primitiveOperations.count = 2 public = true superclassType =
 * java.lang.Object templateMethod = template templateMethodClass = AbstractTemplate
 */